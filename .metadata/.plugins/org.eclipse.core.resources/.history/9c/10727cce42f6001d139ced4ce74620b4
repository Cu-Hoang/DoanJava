package com.shopme.admin.user;

import static org.assertj.core.api.Assertions.assertThat;

import java.awt.print.Pageable;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase.Replace;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.boot.test.autoconfigure.orm.jpa.TestEntityManager;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.test.annotation.Rollback;

import com.shopme.common.entity.Role;
import com.shopme.common.entity.User;

@DataJpaTest
@AutoConfigureTestDatabase(replace = Replace.NONE)
@Rollback(false)
public class UserRepositoryTests {
	@Autowired
	private UserRepository repo;

	@Autowired
	private TestEntityManager entityManager;
	@Test
	public void testCreateUser() {
		
	}

	@Test
	public void testCreateNewUserWithOneRole() {
		Role roleAdmin = entityManager.find(Role.class, 1);
		User user1 = new User("abc@gmail.com", "password", "first", "last");
		user1.addRole(roleAdmin);
		User savedUser = repo.save(user1);
		assertThat(savedUser.getId()).isGreaterThan(0);
	}

	@Test
	public void testCreateNewUserWithTwoRole() {
		User user2 = new User("dfg@gmail.com", "password1", "first1", "last1");
		Role roleEditor = new Role(3);
		Role roleAssistant = new Role(5);
		user2.addRole(roleEditor);
		user2.addRole(roleAssistant);

		User savedUser = repo.save(user2);
		assertThat(savedUser.getId()).isGreaterThan(0);
	}

	@Test
	public void testListAllUser() {
		Iterable<User> listUsers = repo.findAll();
		listUsers.forEach(user -> System.out.println(user));
	}
	@Test 
	public void testGetById() {
		User user=repo.findById(1).get();
		System.out.println(user);
		assertThat(user).isNotNull();
	}
	@Test
	public void testUpdateUserDetails() {
		User user=repo.findById(1).get();
		user.setEnabled(true);
		user.setEmail("xyz@gmail.com");
		
		repo.save(user);
	}
	@Test
	public void testUpdateUserRoles() {
		User user=repo.findById(2).get();
		Role roleEditor = new Role(3);
		Role roleSalesperson = new Role(2);
		user.getRoles().remove(roleEditor);
		user.addRole(roleSalesperson);
		repo.save(user);
	}
	@Test 
	public void testDeleteUser() {
		Integer userId=2;
		repo.deleteById(userId);
	}
	@Test
	public void testCountById() {
		Integer id = 1;
		Long countById = repo.countById(id);
		
		assertThat(countById).isNotNull().isGreaterThan(0);
	}
	@Test
	public void testEnableUser() {
		Integer id = 5;
		repo.updateEnabledStatus(id, true);
	}
	@Test 
	public void testListFirstPage() {
		int pageNumber = 1;
		int pageSize = 4;
		PageRequest pageable = PageRequest.of(pageNumber, pageSize);
		Page<User> page = repo.findAll(pageable);
		List<User> listUsers = page.getContent();
		listUsers.forEach(user -> System.out.println(user));
		assertThat(listUsers.size()).isEqualTo(pageSize);
	}
	@Test
	public void testSearhUsers() {
		String keyword = "first1";
		int pageNumber = 1;
		int pageSize = 4;
		PageRequest pageable = PageRequest.of(pageNumber, pageSize);
		Page<User> page = repo.findAll(keyword,pageable);
		List<User> listUsers = page.getContent();
		listUsers.forEach(user -> System.out.println(user));
		assertThat(listUsers.size()).isGreaterThan(0);
	}

}
